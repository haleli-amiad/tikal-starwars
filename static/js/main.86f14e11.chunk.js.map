{"version":3,"sources":["services/swapi-service.js","components/Table.jsx","components/Chart.jsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","swapiService","initSwapi","a","swapi","JSON","parse","localStorage","getItem","getData","planets","vehicles","getDataForTable","chart","getDataForChart","setItem","stringify","planetsNames","filter","planet","includes","name","map","population","summed","pilots","pilot","pilotsUrls","pilotUrl","residents","push","populationSum","sort","b","getPilots","getLargestSum","sumPopulation","data","vehicle","pilotNames","createPilotsMap","Promise","all","fetch","then","response","json","filterData","filterBy","item","length","fetchApi","prevData","next","url","results","dataType","result","console","log","Table","Chart","className","style","height","App","useState","setData","useEffect","res","animationData","Yoda","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86f14e11.chunk.js","sourcesContent":["const BASE_URL = \"https://swapi.dev/api/\";\n\nexport const swapiService = {\n    initSwapi\n};\n\n// Root exported function for initializing data calculation \nasync function initSwapi() {\n    let swapi = JSON.parse(localStorage.getItem('swapi'));\n    if (!swapi) {\n        const planets = await getData('planets', 'residents');\n        const vehicles = await getData('vehicles', 'pilots');\n        swapi = await getDataForTable(planets, vehicles);\n        swapi.chart = getDataForChart(planets);\n        localStorage.setItem('swapi', JSON.stringify(swapi));\n    }\n    return swapi;\n}\n\n// Filtering name & population of relevant planets\nfunction getDataForChart(planets) {\n    const planetsNames = ['Tatooine', 'Alderaan', 'Naboo', 'Bespin', 'Endor'];\n    return planets.filter(planet => planetsNames.includes(planet.name)).map(planet => planet = { name: planet.name, population: planet.population });\n}\n\n// Finalizing data calculation for the table\nfunction getDataForTable(planets, vehicles) {\n    const pilots = createPilotsMap(vehicles);\n    const summed = sumPopulation(pilots, planets);\n    return summed;\n}\n\n// Function for creating data map of pilots, vehicles & planets\nfunction createPilotsMap(data) {\n    const pilots = [];\n    data.map((vehicle) => pilots.push({ pilotsUrls: vehicle.pilots, vehicle: vehicle.name, populationSum: 0, planets: [], pilotNames: [] }));\n    return pilots;\n}\n\n// Adding planet data and summing relevant planets population\nfunction sumPopulation(pilots, planets) {\n    pilots.map(pilot => pilot.pilotsUrls.map(pilotUrl => planets.map(planet => {\n        if (planet.residents.includes(pilotUrl) && planet.population !== 'unknown') {\n            pilot.planets.push({ name: planet.name, population: planet.population });\n            pilot.populationSum += +planet.population;\n        }\n        return pilot;\n    })));\n    return getLargestSum(pilots);\n}\n\n// Sorting by population size and return only relevant vehicle\nfunction getLargestSum(pilots) {\n    pilots.sort((a, b) => b.populationSum - a.populationSum);\n    return getPilots(pilots[0]);\n}\n\n// Querying for pilots names\nasync function getPilots(data) {\n    await Promise.all(data.pilotsUrls.map(async pilot => {\n        await fetch(pilot).then(response => response.json()).then(response => { data.pilotNames.push(response.name) });\n    }))\n    return data;\n}\n\n// Reusable function for filtering data by array length (true or false)\nfunction filterData(data, filterBy) {\n    return data.filter(item => item[filterBy].length);\n}\n\n// Reusable function for fetching data from Swapi\nasync function fetchApi(data, prevData, next = null) {\n    let url = next ? next : `${BASE_URL}${data}`;\n    return await fetch(url).then(response => response.json()).then(response => {\n        return response = {\n            next: response.next || null,\n            data: prevData ? [...prevData, ...response.results] : response.results\n        };\n    })\n}\n\n// Reusable function for fetching data from Swapi & checking if there is a next page\nasync function getData(dataType, filterBy) {\n    try {\n        var result = await fetchApi(dataType);\n        while (result.next) {\n            result = await fetchApi(dataType, result.data, result.next);\n        }\n    } catch (error) {\n        console.log('had issue getting data:', error);\n    } finally {\n        return filterData(result.data, filterBy);\n    }\n}","export default function Table({ data }) {\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td>Vehicle name with the largest sum:</td>\n          <td>{data.vehicle}</td>\n        </tr>\n        <tr>\n          <td>Related home planets and their respective population:</td>\n          <td>\n            {data.planets.map((planet) => (\n              <span key={planet.name}>\n                {planet.name}, {planet.population}\n              </span>\n            ))}\n          </td>\n        </tr>\n        <tr>\n          <td>Related pilot names:</td>\n          <td>\n            {data.pilotNames.map((name) => <span key={name}>{name}</span>)}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n","export default function Chart({ data }) {\n  return (\n    <div className=\"chart\">\n      <ul className=\"flex center\">\n        {data.chart.map((planet) => (\n          <li key={planet.name}>\n            <h5>{planet.population}</h5>\n            <div style={{ height: `${planet.population / 10000000}px` }} />\n            <p>{planet.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { swapiService } from './services/swapi-service';\nimport { useEffect, useState } from 'react';\nimport Table from './components/Table';\nimport Chart from './components/Chart';\nimport Lottie from \"lottie-react\";\nimport Yoda from \"./assets/lottie/yoda.json\";\n\nexport default function App() {\n\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    getData();\n    return () => {\n    }\n  }, [])\n\n  const getData = async () => {\n    try {\n      var res = await swapiService.initSwapi();\n    } catch (error) {\n      console.log('error retrieving data:', error);\n    } finally {\n      setData(res);\n    }\n  }\n\n  return (data &&\n    <div className=\"App main-layout\">\n      <h1>Swapi Challenge</h1>\n      <Table data={data} />\n      <div className=\"flex space mobile-wrap\">\n        <Chart data={data} />\n        <Lottie animationData={Yoda} className=\"lottie\" />\n      </div>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './assets/scss/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}